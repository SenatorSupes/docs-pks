---
title: Using Custom CA for Kubernetes Clusters
owner: PKS-SECURITY
---

This topic describes how to use custom TLS certificate authority (CA) for Kubernetes clusters provisioned by <%= vars.product_short %>.

##<a id='per-cluster-ca'></a> Per Cluster CA

<%= vars.k8s_runtime_abbr %> uses Transport Layer Security (TLS) to encrypt the data used by the <%= vars.product_short %> control plane and the data used by the Kubernetes clusters provisioned by <%= vars.product_short %>. For more information, see [Tanzu Kubernetes Grid Integrated Edition Certificates](certificate-concepts.html).

<%= vars.product_short %> v1.11 introduces a per-cluster CA for Kubernetes clusters. The CA is named `kubo_master_ca_2021` and signs the following cluster certificates:

- tls-kubernetes-2018
- tls-ncp-2018 (with NSX-T)
- tls-nsx-kube-proxy-2018 (with NSX-T)

<%= vars.k8s_runtime_abbr %> manages the lifecycle of the per-cluster CA and the certificates it signs. For example, the certificates are automatically renewed when you upgrade that cluster. You cannot manually rotate or update the system-managed certificates.

##<a id='custom-ca'></a> Custom CA Support

For <%= vars.product_short %> v1.11 and later, the default behavior is to create a new `CA kubo_master_ca_2021` for each Kubernetes cluster. For most use cases, the system-provided and -managed [per-cluster CA](#per-cluster-ca) is appropriate. If requirements dictate, you can apply a custom CA for a Kubernetes cluster, either during [cluster creation](#ca-custom-new) or after [cluster upgrade](#ca-custom-upgrade).

Providing your own custom CA for Kubernetes clusters is an advanced operation. If you implement a custom CA for one or more Kubernetes clusters, you are responsible for managing the lifecycle of the CA, including [certificate rotation](#ca-custom-rotate).

##<a id='ca-custom-new'></a> Custom CA for New Kubernetes Clusters

To use a custom CA with a new Kubernetes cluster, specify the custom CA using the `--config-file` option during the cluster creation process. For example:

```
tkgi create-cluster <clustername> --external-hostname <clustername.example.com> --plan 'Plan 1' --config-file custom_ca.yaml
```

Where `custom_ca.yaml` has the following example custom CA contents:

```
# YAML for custom CA certificate and keys
---
custom_ca:
  certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL
    ...
    BWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==
    -----END CERTIFICATE-----
  private_key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E
    ...
    vf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w
    -----END RSA PRIVATE KEY-----
```

Alternatively, you can use JSON, where `custom_ca.json` has the following example custom CA contents:

```
{
  "custom_ca": {
    "certificate": "-----BEGIN CERTIFICATE-----\
    ...
    \n-----END CERTIFICATE-----\n",
    "private_key": "-----BEGIN RSA PRIVATE KEY-----\
    ...
    \n-----END RSA PRIVATE KEY-----\n"
  }
}
```

##<a id='ca-custom-upgrade'></a> Custom CA for Upgraded Kubernetes Clusters

To apply a custom CA to a Kubernetes cluster that has been upgraded to the supported version, specify the custom CA using the `--config-file` option during the cluster update process. For example:

```
tkgi update-cluster <clustername> --config-file custom_ca.yaml
```

Where `custom_ca.yaml` has the following example custom CA contents:

```
# YAML for custom CA certificate and keys
---
custom_ca:
  certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL
    ...
    BWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==
    -----END CERTIFICATE-----
  private_key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E
    ...
    vf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w
    -----END RSA PRIVATE KEY-----
```

Alternatively, you can use JSON, where `custom_ca.json` has the following example custom CA contents:

```
{
  "custom_ca": {
    "certificate": "-----BEGIN CERTIFICATE-----\
    ...
    \n-----END CERTIFICATE-----\n",
    "private_key": "-----BEGIN RSA PRIVATE KEY-----\
    ...
    \n-----END RSA PRIVATE KEY-----\n"
  }
}
```
##<a id='ca-custom-rotate'></a> Custom CA Certificate Rotation

If you apply a custom CA to a new or upgraded Kubernetes cluster, you are responsible for managing the lifecycle of the CA, including the certificates and keys signed by it. To manually rotate cluster certificates, refer to the topic [Rotating Cluster Certificates](rotate-cluster-certificates.html).


