---
title: Using a Custom CA for Kubernetes Clusters
owner: PKS-SECURITY
---

This topic describes how to use a custom certificate authority (CA) to secure your Kubernetes clusters provisioned by <%= vars.product_short %>.

##<a id='cluster-ca'></a> Per-Cluster CA

<%= vars.product_short %> uses TLS to encrypt the data used by the control plane and the data used by Kubernetes clusters. 
For more information, see [TKGI Certificates](certificate-concepts.html).

<%= vars.k8s_runtime_abbr %> v1.11 introduces a per-cluster CA for Kubernetes clusters.
The cluster CA is named `kubo_master_ca_2021` and signs the following cluster certificates:

- tls-kubernetes-2018
- tls-ncp-2018 (with NSX-T)
- tls-nsx-kube-proxy-2018 (with NSX-T)

<%= vars.k8s_runtime_abbr %> manages the lifecycle of the cluster CA and the certificates it signs.
Functionality to support rotation of the system-managed CA will be introduced in an upcoming release. 

##<a id='custom-ca'></a> Custom CA Support

By default <%= vars.k8s_runtime_abbr %> creates a new CA for each cluster.
For most use cases, the system-managed [per-cluster CA](#cluster-ca) is appropriate. 
If required, you can apply a custom CA to your cluster, 
either during [creation](#custom-ca-new) or [update](#custom-ca-update).

Configuring a cluster with a custom CA is an advanced operation. 
If you use a custom CA, you are responsible for managing its lifecycle, 
including monitoring its expiry and [rotating](#custom-ca-rotate) it while still valid.

To use custom CA functionality, you must use <%= vars.k8s_runtime_abbr %> v1.11 or later. 
Existing clusters must be upgraded to support [per-cluster CA](#cluster-ca).

##<a id='custom-ca-new'></a> Create a Cluster with a Custom CA

To apply a custom CA to a new cluster, 
specify the custom CA using the `--config-file` option with the `create-cluster` operation.

For example:

```
tkgi create-cluster <clustername> --external-hostname <clustername.example.com> --plan 'Plan 1' --config-file custom_ca.yaml
```

Where the example `custom_ca.yaml` has the following contents:

```
# YAML for custom CA certificate and keys
---
custom_ca:
  certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL
    ...
    BWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==
    -----END CERTIFICATE-----
  private_key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E
    ...
    vf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w
    -----END RSA PRIVATE KEY-----
```

Alternatively, you can use JSON, where the example `custom_ca.json` has the following contents:

```
{
  "custom_ca": {
    "certificate": "-----BEGIN CERTIFICATE-----\
    ...
    \n-----END CERTIFICATE-----\n",
    "private_key": "-----BEGIN RSA PRIVATE KEY-----\
    ...
    \n-----END RSA PRIVATE KEY-----\n"
  }
}
```

##<a id='custom-ca-update'></a> Update a Cluster with a Custom CA

To apply a custom CA to an existing cluster, 
specify the custom CA using the `--config-file` option with the `update-cluster` operation. 

For example:

```
tkgi update-cluster <clustername> --config-file custom_ca.yaml
```

Where the example `custom_ca.yaml` has the following contents:

```
# YAML for custom CA certificate and keys
---
custom_ca:
  certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL
    ...
    BWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==
    -----END CERTIFICATE-----
  private_key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E
    ...
    vf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w
    -----END RSA PRIVATE KEY-----
```

Alternatively, you can use JSON, where the example `custom_ca.json` has the following contents:

```
{
  "custom_ca": {
    "certificate": "-----BEGIN CERTIFICATE-----\
    ...
    \n-----END CERTIFICATE-----\n",
    "private_key": "-----BEGIN RSA PRIVATE KEY-----\
    ...
    \n-----END RSA PRIVATE KEY-----\n"
  }
}
```

##<a id='custom-ca-rotate'></a> Rotate a Custom CA

You can rotate a [custom CA](#custom-ca) by updating the cluster with the new CA. 

<p class="note"><strong>Note:</strong> This procedure is designed to work if the custom CA you are replacing has not expired.</p>

For example:

```
tkgi update-cluster <clustername> --config-file custom_ca_new.yaml
```	

Or:

```
tkgi update-cluster <clustername> --config-file custom_ca_new.json
``` 

