---
title: Use a Custom CA for Kubernetes Clusters
owner: PKS-SECURITY
---

This topic describes how to use a custom certificate authority (CA) to secure your Kubernetes clusters provisioned by <%= vars.product_short %>.

##<a id='custom-ca'></a> Custom CA Support
 
By default <%= vars.k8s_runtime_abbr %> creates a new per-cluster CA (`kubo_master_ca_202`) for each Kubernetes cluster.
<%= vars.k8s_runtime_abbr %> manages the lifecycle of the per-cluster CA and the certificates it signs.
For more information, see [Overview of Kubernetes Cluster Certificates](rotate-cluster-certificates.html#overview).

For most use cases, the system-managed per-cluster CA is appropriate. 
If required, you can apply a custom CA to a Kubernetes cluster, 
either during [creation](#custom-ca-new) or [update](#custom-ca-update).

Configuring a Kubernetes cluster with a custom CA is an advanced operation. 
If you use a custom CA, you are responsible for managing its lifecycle, 
including monitoring its expiry and [rotating](#custom-ca-rotate) it while still valid.

To use custom CA functionality, you must run <%= vars.k8s_runtime_abbr %> v1.11 or later. 
Existing clusters must be upgraded to support [per-cluster CA](#cluster-ca).

<p class="note warning">
<strong>Warning:</strong> Using a custom CA is an advanced operation.
It is recommended that you contact Support before proceeding.
</p>

##<a id='custom-ca-new'></a> Create a Cluster with a Custom CA

To apply a custom CA to a new cluster, 
specify the custom CA using the `--config-file` option with the `create-cluster` operation.

For example:

```
tkgi create-cluster <clustername> --external-hostname <clustername.example.com> --plan 'Plan 1' --config-file custom_ca.yaml
```

See also custom CA [requirements](#custom-ca-reqs) and [examples](#custom-ca-egs).

##<a id='custom-ca-update'></a> Update a Cluster with a Custom CA

To apply a custom CA to an existing cluster, 
specify the custom CA using the `--config-file` option with the `update-cluster` operation. 

For example:

```
tkgi update-cluster <clustername> --config-file custom_ca.yaml
```

See also custom CA [requirements](#custom-ca-reqs) and [examples](#custom-ca-egs).

##<a id='custom-ca-rotate'></a> Rotate a Custom CA

You can rotate a [custom CA](#custom-ca) by updating the cluster with the new CA. 

<p class="note"><strong>Note:</strong> This procedure is designed to work if the custom CA you are replacing has not expired.</p>

For example:

```
tkgi update-cluster <clustername> --config-file custom_ca_new.yaml
```	

Or:

```
tkgi update-cluster <clustername> --config-file custom_ca_new.json
``` 

See also custom CA [requirements](#custom-ca-reqs) and [examples](#custom-ca-egs).

##<a id='custom-ca-debug'></a> Troubleshoot Custom CA

The log is located at `/var/vcap/sys/log/pks-api.log`.

The following command will trigger a Bosh deployment. You can track the progress using the Bosh CLI:

```
 bosh tasks
 bosh task <task-id> --debug
```

After rotation of the custom CA, check the cluster status and certificate expiration date.

##<a id='custom-ca-reqs'></a> Custom CA Requirements

<%= vars.k8s_runtime_abbr %> supports both YAML (`*.yml` or `*.yaml`) and JSON (`*.json') configuration file format for supplying the custom CA.

The custom CA must include a certificate and private key be in standard PEM format as follows:

```
{
“custom_ca”: {
    “certificate”: “certificate in PEM format”,
    “private_key”: “private key in PEM format”
    }
}
```

The custom CA must satisfy following validation rules:

- It must be a CA
- It must be a root CA
- It must not expire within 6 months
- The private key and the certificate must match

##<a id='custom-ca-egs'></a> Custom CA Examples

Here is an example configuration file for a custom CA in YAML format (`custom_ca.yaml`):

```
# YAML for custom CA certificate and keys
---
custom_ca:
  certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL
    wE/KAULNFI7rHrLoVgYYRtOObXzf//APRM15pAxQhAdGM9+JvGmI7tbSt0hZeT8g
    uXd5U8EMp316lV8dar7iZSi/yq76VzKe8H58PDhJzFB6e/V6UKEpLyc0JZ2SKdzr
    BWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==
    -----END CERTIFICATE-----
  private_key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E
    D3yqq888cYX4B1VbfK2V++ITeAL6ECQ8P5AVAMAdODzAdfgZvtnZPghu6UqNbhMC
    vf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w
    -----END RSA PRIVATE KEY-----
```

Here is an example configuration file for a custom CA in JSON format (`custom_ca.json`):

```
{
   "custom_ca":{
      "certificate":"-----BEGIN CERTIFICATE-----\nMIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL\nBQAwSjENMAsGA1UEAxMEVEtHSTEOMAwGA1UECxMFVGFuenUxCzAJBgNVBAYTAlVT\nMQswCQ3gkF0oKgVuPbvxmF0Of6Ueh4Vr5ZBcS\nwE/KAULNFI7rHrLoVgYYRtOObXzf//APRM15pAxQhAdGM9+JvGmI7tbSt0hZeT8g\nuXd5U8EMp316lV8dar7iZSi/yq76VzKe8H58PDhJzFB6e/V6UKEpLyc0JZ2SKdzr\nBWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==\n-----END CERTIFICATE-----\n",
      "private_key":"-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E\noiV+YbLcAT0c+gJLG6wQnwExZe\nk+FaPwKBgA/v2jBEqeUEihiYIvGFQXIoHXePtUr/vwOpFGoedCFTpoUqZSPUDszr\nD3yqq888cYX4B1VbfK2V++ITeAL6ECQ8P5AVAMAdODzAdfgZvtnZPghu6UqNbhMC\nvf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w\n-----END RSA PRIVATE KEY-----\n"
   }
}
```



