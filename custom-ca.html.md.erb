---
title: Using Custom CA for Kubernetes Clusters
owner: PKS-SECURITY
---

This topic describes how to use custom TLS certificate authority (CA) for Kubernetes clusters provisioned by <%= vars.product_short %> v1.11 and later.

##<a id='per-cluster-ca'></a> Per Cluster CA

<%= vars.k8s_runtime_abbr %> uses Transport Layer Security (TLS) to encrypt the data used by the <%= vars.product_short %> control plane 
and the data used by the Kubernetes clusters provisioned by <%= vars.product_short %>. 
For more information, see [Tanzu Kubernetes Grid Integrated Edition Certificates](certificate-concepts.html).

<%= vars.product_short %> v1.11 introduces a per-cluster CA for Kubernetes clusters. 
The CA is named `kubo_master_ca_2021` and signs the following cluster certificates:

- tls-kubernetes-2018
- tls-ncp-2018 (with NSX-T)
- tls-nsx-kube-proxy-2018 (with NSX-T)

<%= vars.k8s_runtime_abbr %> manages the lifecycle of the per-cluster CA and the certificates it signs.
You cannot manually rotate or update the system-managed certificates. Functionality to support this 
will be introduced in an upcoming release.

##<a id='custom-ca'></a> Custom CA Support

For <%= vars.product_short %> v1.11 and later, the default behavior is to create a new `CA kubo_master_ca_2021` for each Kubernetes cluster. 
For most use cases, the system-provided and -managed [per-cluster CA](#per-cluster-ca) is appropriate. 
If requirements dictate, you can apply a custom CA for a Kubernetes cluster, 
either during [cluster creation](#ca-custom-new) or [cluster update](#ca-custom-update).

Providing your own custom CA for Kubernetes clusters is an advanced operation. 
If you implement a custom CA for one or more Kubernetes clusters, 
you are responsible for managing the lifecycle of the CA, including [certificate rotation](#ca-custom-rotate).

To apply a custom CA to a [new cluster](#ca-custom-new), <%= vars.product_short %> must be v1.11 or later.
To apply a custom CA to an [existing cluster](#ca-custom-update), the cluster must have been upgraded so that
it is using a [system-managed CA](#per-cluster-ca).

##<a id='ca-custom-new'></a> Custom CA for New Clusters

You can apply a custom CA to a new Kubernetes cluster. To do this, specify the custom CA 
using the `--config-file` option with the `create-cluster` operation.

For example:

```
tkgi create-cluster <clustername> --external-hostname <clustername.example.com> --plan 'Plan 1' --config-file custom_ca.yaml
```

Where an example `custom_ca.yaml` has the following custom CA contents:

```
# YAML for custom CA certificate and keys
---
custom_ca:
  certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL
    ...
    BWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==
    -----END CERTIFICATE-----
  private_key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E
    ...
    vf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w
    -----END RSA PRIVATE KEY-----
```

Alternatively, you can use JSON, where an example `custom_ca.json` has the following custom CA contents:

```
{
  "custom_ca": {
    "certificate": "-----BEGIN CERTIFICATE-----\
    ...
    \n-----END CERTIFICATE-----\n",
    "private_key": "-----BEGIN RSA PRIVATE KEY-----\
    ...
    \n-----END RSA PRIVATE KEY-----\n"
  }
}
```

##<a id='ca-custom-update'></a> Apply a Custom CA During Cluster Update

You can apply a custom CA to an existing cluster that is using a system-managed cluster CA. 
To do this, specify the custom CA using the `--config-file` option with the `update-cluster` operation. 

For example:

```
tkgi update-cluster <clustername> --config-file custom_ca.yaml
```

Where an example `custom_ca.yaml` has the following custom CA contents:

```
# YAML for custom CA certificate and keys
---
custom_ca:
  certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL
    ...
    BWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==
    -----END CERTIFICATE-----
  private_key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E
    ...
    vf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w
    -----END RSA PRIVATE KEY-----
```

Alternatively, you can use JSON, where an example `custom_ca.json` has the following custom CA contents:

```
{
  "custom_ca": {
    "certificate": "-----BEGIN CERTIFICATE-----\
    ...
    \n-----END CERTIFICATE-----\n",
    "private_key": "-----BEGIN RSA PRIVATE KEY-----\
    ...
    \n-----END RSA PRIVATE KEY-----\n"
  }
}
```

##<a id='ca-custom-rotate'></a> Custom CA Certificate Rotation

If you have applied a custom cluster CA, either to a new cluster or during a cluster update, 
you can rotate the custom CA by updating the cluster with the new CA. 

<p class="note"><strong>Note:</strong> The procedure is designed to work if the CA you are 
replacing has not expired. You must monitor the expiry date of the custom CA, 
and rotate it while it is still valid.</p>

For example:

```
tkgi update-cluster <clustername> --config-file custom_ca_new.yaml
```	

Where an example `custom_ca_new.yaml` has the following custom CA contents:

```
# YAML for custom CA certificate and keys
---
custom_ca:
  certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL
    ...
    BWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==
    -----END CERTIFICATE-----
  private_key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E
    ...
    vf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w
    -----END RSA PRIVATE KEY-----
```

Alternatively, you can use JSON, where an example `custom_ca_new.json` has the following custom CA contents:

```
{
  "custom_ca": {
    "certificate": "-----BEGIN CERTIFICATE-----\
    ...
    \n-----END CERTIFICATE-----\n",
    "private_key": "-----BEGIN RSA PRIVATE KEY-----\
    ...
    \n-----END RSA PRIVATE KEY-----\n"
  }
}
```