---
title: Using Helm with Tanzu Kubernetes Grid Integrated Edition
owner: TKGI
---

This topic describes how to install the Helm package manager 
on <%= vars.product_full %> (<%= vars.product_short %>). 


##<a id='overview'></a> Overview

Helm is a package manager you can use to deploy <%= vars.product_short %> components, such as Wavefront, 
and your <%= vars.product_short %> Kubernetes apps.  

Helm includes the following components:

<table>
  <tr>
    <th>Component</th>
    <th>Role</th>
    <th>Location</th>
  </tr>
  <tr>
    <td><code>helm</code></td>
    <td>Client</td>
    <td>Runs on your local workstation</td>
  </tr>
  <tr>
    <td><code>tiller</code></td>
    <td>Server</td>
    <td>(Helm 2 only) Runs inside your Kubernetes cluster</td>
  </tr>
</table>
<br>
To install Helm, see [Install and Configure Helm](#install-helm).  

To use Helm to deploy components or your apps to <%= vars.product_short %>, 
see [Deploy Apps and Components Using Helm](#deploy-using-helm).  


##<a id='install-helm'></a> Install and Configure Helm

You can use either [Helm 3](https://helm.sh/)
or its predecessor [Helm 2](https://v2.helm.sh/) as your <%= vars.product_short %> Helm package manager. 
Helm 3 is more easily installed than Helm 2 and requires less configuration.  

To install and configure Helm 3 for <%= vars.product_short %>, see 
[Install and Configure Helm 3](#helm-3) below. 
To install Helm 2, see [Install and Configure Helm 2](#helm-2) below.  


###<a id='helm-3'></a> Install and Configure Helm 3

To install and configure Helm 3, follow the [Step 1: Install And Configure Helm](
https://docs.bitnami.com/kubernetes/get-started-charts-pks/#step-1-install-and-configure-helm) instructions in the Bitnami <%= vars.k8s_runtime_abbr %> documentation.

###<a id='helm-2'></a> Install and Configure Helm 2

To use Helm 2 with <%= vars.product_short %>, you must first configure the Tiller component to give it access to the Kubernetes API.
Tiller runs inside the Kubernetes cluster.

To grant API access to Tiller and install Helm 2: 

1. Create a role-based access control (RBAC) configuration file named `rbac-config.yaml` that contains the following:

    ```yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: tiller
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: tiller
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
      - kind: ServiceAccount
        name: tiller
        namespace: kube-system
    ```
    
1. Create the service account and role by running the following command:
  
    ```
    kubectl create -f rbac-config.yaml
    ```

1. Download and install the latest v2 patch release of the [Helm CLI](https://github.com/kubernetes/helm/releases).

1. Deploy Helm 2 using the service account by running the following command:
    
    ```
    helm init --service-account tiller
    ```

1. Verify that the permissions are configured by running the following command: 
      
    ```
    helm ls
    ``` 
    There should be no output from the above command.

To apply more granular permissions to the Tiller service account, see the [Helm RBAC](https://github.com/kubernetes/helm/blob/master/docs/rbac.md) documentation.

For more information about securing Helm 2, see the Bitnami article [Exploring the Security of Helm](https://engineering.bitnami.com/articles/helm-security.html).


##<a id='deploy-using-helm'></a> Deploy Apps and Components Using Helm

To deploy an app using Helm the app must first be packaged as a Helm deployment package.
A Helm deployment is called a "_Helm chart_".  

For example Helm charts, see the Helm chart configurations in [concourse/concourse-chart](https://github.com/concourse/concourse-chart),
[DataDog/helm-charts](https://github.com/DataDog/helm-charts), or 
any of the archived charts in the [Helm Charts](https://github.com/kubernetes/charts) repository on GitHub.  


To deploy an existing third-party component to  <%= vars.product_short %> using a Helm chart:  

1. Download the component's Helm chart from the official repositories in the 
[Artifact HUB](https://artifacthub.io/packages/search?page=1&official=true). 
1. Complete the deployment instructions for the component.   

To deploy a Wavefront Helm chart to a <%= vars.product_short %> Windows cluster:

1. Run the following:

    ```
    helm install wavefront wavefront/wavefront --namespace wavefront \
    --set clusterName=CLUSTER-NAME \
    --set wavefront.url=https://CLUSTER-NAME.wavefront.com \
    --set wavefront.token=API-TOKEN \
    --set collector.usePKSPrefix=true \
    --set collector.useDaemonset=false
    ```

    Where:
    * `CLUSTER-NAME` is the name of your Kubernetes cluster.
    * `API-TOKEN` is the Wavefront API token for your Wavefront subscription.



To deploy your app to <%= vars.product_short %> using a Helm:  

1. Package the app as a Helm chart. 
For information on how to create a Helm chart for your app, see 
[Charts](https://docs.helm.sh/developing_charts/) in the Helm documentation.  
