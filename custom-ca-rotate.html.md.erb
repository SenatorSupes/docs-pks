---
title: Custom Certificate Authority for TKGI
owner: PKS-NSXT
---

This topic describes how to use separate TLS certificate authorities (CA) for the <%= vars.product_short %> control plane and Kubernetes clusters.

##<a id='about'></a> TLS Certificate Authority Options for TKGI

<%= vars.k8s_runtime_abbr %> uses Transport Layer Security (TLS) to encrypt the data used by the <%= vars.product_short %> control plane and the data used by the Kubernetes clusters provisioned by <%= vars.product_short %>.

Prior to <%= vars.product_short %> v1.11, <%= vars.product_short %> used a single certificate authority (CA) to sign all TLS certificates used by both the <%= vars.product_short %> control plane and Kubernetes clusters provisioned by TKGI. Using a single CA for both the control plane and the data plane presented challenges if the global CA expires or individual certificates need to be rotated. In addition, you could not use your own CA for Kuberentes clusters.

To address these limitations, <%= vars.product_short %> v1.11 introduces a separate CA for Kubernetes clusters. This separation decouples the Kubernetes cluster cerifiction rotation process from the <%= vars.product_short %> certification administration overhead and lets you bring your own CA for use with Kubernetes clusters.

For the <%= vars.product_short %> control plane, the CA named `kubo_odb_ca_2018` is used to sign the following TLS certificates:

- pks_api_internal_2018
- telemetry_forward_tls_2020

For Kubernetes clusters, the CA named `kubo_master_ca_2021` signs the following TLS certificates:

- tls-kubernetes-2018 (Per Kubernetes Cluster)
- tls-ncp-2018 (Per Kubernetes Cluster, If NSX)
- tls-nsx-kube-proxy-2018 (Per Kubernetes Cluster, If NSX)

<p class="note warning"><strong> WARNING:</strong> Using your own CA for Kubernetes clusters is an advanced feature. For most customers, upgrading to <%= vars.product_short %> v1.11 and using the default CAs addresses the challenges cited above.</p>

##<a id='ca-upgrades'></a> Upgrades

For upgrades to <%= vars.product_short %> v1.11, the system automatically introduces the new CA for the Kubernetes clusters and migrates the certficates to use the new CA. The new CA is then used to sign those affected certificates within the cluster. There is no impact on client since the CA content has not changed. 

If you want you can customzie the installation with custom CAs after upgraded, you can do so. See [customization](#ca-customization).

##<a id='ca-custom'></a> Custom CA for New Kubernetes Clusters

With new insallations, the default behavior is to create a new CA kubo_master_ca_2021 for the cluster.

Optionally, you can introduce a custom CA for Kubernetes clusters.

To use a custom CA with a Kubernets cluster, specify the CA using the `--config-file` option during the cluster creation process. For example:

```
tkgi create-cluster <somecluster> --external-hostname <somecluster.example.com> --plan 'Plan 1' --config-file custom_ca.yaml
```

Where `custom_ca.yaml` has the following exmaple contents:

```
# YAML for custom CA certificate and keys
---
custom_ca:
  certificate: |
    -----BEGIN CERTIFICATE-----
    MIIDdTCCAl2gAwIBAgIUAyYwzsbEoRKrd+j2L74Noh3CDEEwDQYJKoZIhvcNAQEL
    ...
    BWlVhWvqBkTMTCNE83gGLPvRgTWqSqsd+Q==
    -----END CERTIFICATE-----
  private_key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAti6NiJny8D+dfFZ2TXY4VWTyjyr/tFuVLr9XcwOhe9q/lQ6E
    ...
    vf3/DKcf9K/iHfdrfDDO/fVE/TO/4Gc1qmc2Arw1uWruXlqV2+6w
    -----END RSA PRIVATE KEY-----
    ```

Alternatively, you can use JSON. The `config.json` has the following example contents:

{
  "custom_ca": {
    "certificate": "-----BEGIN CERTIFICATE-----\
    ...
    \n-----END CERTIFICATE-----\n",
    "private_key": "-----BEGIN RSA PRIVATE KEY-----\
    ...
    \n-----END RSA PRIVATE KEY-----\n"
  }
}

##<a id='ca-custom-day2'></a> Update an Existing Cluster with a Custom CA

User can customize CA from the clusters resulted from all above scenarios.

```
tkgi update-cluster <somecluster> --config-file custom_ca.yaml
```

To rotate the certificates, refer to the topic [Rotating Cluster Certificates](https://docs.pivotal.io/tkgi/1-10/rotate-cluster-certificates.html).


